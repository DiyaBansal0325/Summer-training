# -*- coding: utf-8 -*-
"""ColumnTransformer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a1lJKHdtgZ-5vBsGL7rZ69c3-SI5hFtA

#Column Transformer
"""

import numpy as np
import pandas as pd

from sklearn.impute import SimpleImputer
from sklearn.preprocessing import OneHotEncoder

from sklearn.preprocessing import OrdinalEncoder

df = pd.read_csv("covid_toy.csv")

df

df.isnull().sum()

from sklearn.model_selection import train_test_split

x_train , x_test , y_train , y_test = train_test_split(df.drop(columns= ['has_covid']) , df['has_covid'] , test_size=0.2)

x_train

"""#Manually type output"""

#adding simple imputer to fever column
si = SimpleImputer(strategy="mean")
x_train_fever = si.fit_transform(x_train[['fever']])

#also the test data
x_test_fever = si.fit_transform(x_test[['fever']])

x_train_fever.shape

#Ordinal Encoding ---> Cough

oe = OrdinalEncoder(categories= [['Mild' , 'Strong']])
x_train_cough = oe.fit_transform(x_train[['cough']])

#also the test data
x_test_cough = oe.fit_transform(x_test[['cough']])

x_train_cough.shape

#OneHotEncoding ---> Gender , city

ohe = OneHotEncoder(drop='first' , sparse_output= False)
x_train_gender_city = ohe.fit_transform(x_train[['gender' , 'city']])

#also the test data
x_test_gender_city = ohe.fit_transform(x_test[['gender' , 'city']])

x_train_gender_city.shape

#Extracting Age

x_train_age = x_train.drop(columns=
                           ['gender','fever','cough','city']).values
#also the test data
s_test_age = x_test.drop(columns=
                         ['gender','fever','cough','city']).values

x_train_age.shape

x_train_tranformed = np.concatenate((x_train_age , x_train_fever , x_train_gender_city , x_train_cough),axis = 1)

x_train_tranformed.shape

# x_train_tranformed = np.concatenate((x_train_age , x_train_fever , x_train_gender_city , x_train_cough),axis = 1)

x_train_tranformed

"""#By using Column Transformer

"""

from sklearn.compose import ColumnTransformer  #this is how to import Column transformer

transformer = ColumnTransformer(transformers= [
    ('tnf1',SimpleImputer(),['fever']),       #in a fever column by the help of SI we fill missing values by mean , median , mode
    ('tnf2',OrdinalEncoder(categories=[['Mild','Strong']]),['cough']),    #by this process we encode our data
    ('tnf3',OneHotEncoder(sparse_output = False,drop='first'),['gender','city'])
    ],remainder='passthrough') #remsinder='passthrough' ===> means rest all the columns remain same

transformer.fit_transform(x_train).shape

